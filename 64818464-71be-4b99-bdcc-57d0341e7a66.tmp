{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "33cfafa8-8365-4514-8601-fe10b1140be4",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 1.  abstraction is blue print of classes by making which we make skelton of other classes and pre_define all the functions which can we edit or change in every class according to our requirement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "473ab0ef-ce28-4eb1-a1eb-ba5934bebccf",
   "metadata": {},
   "outputs": [],
   "source": [
    "## example of abstraction class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "373cedff-2d15-4e8f-9698-8d1bcf52af6f",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import abc\n",
    "\n",
    "class bank:\n",
    "    \n",
    "    @abc.abstractclassmethod\n",
    "    def acccount_no(self):\n",
    "        pass\n",
    "    \n",
    "    def balance(self):\n",
    "        pass\n",
    "    \n",
    "    def deposit(self):\n",
    "        pass\n",
    "    \n",
    "    def widraw(self):\n",
    "        pass\n",
    "    \n",
    "    def check_balance(self):\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "dd238a8d-e1c5-4b56-b5b3-d20d19c170a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "class hdfc(bank):\n",
    "    \n",
    "    def __init__(self,account_no,ifsc_code,balance):\n",
    "        self.__account=account_no\n",
    "        self.__ifsc=ifsc_code\n",
    "        self.__balance=balance\n",
    "        \n",
    "        \n",
    "    def deposit(self,amount):\n",
    "        self.__balance=self.__balance+amount\n",
    "        return \"your account no\",self.__account, \"is credited with\",amount,\"and now your current balance is \",self.__balance\n",
    "    \n",
    "    \n",
    "    def  widraw(self,amount):\n",
    "        if self.__balance>amount:\n",
    "            slf.__balance=self.__balance-amount\n",
    "        else:\n",
    "            return \"your account balance is insufficient for this transaction if you want you may widraw\",self.__balance,\"now\"\n",
    "\n",
    "    def    check_balance(self):\n",
    "        return self.__balance\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b2c18a62-22c2-41cf-b103-c0ee0d091929",
   "metadata": {},
   "outputs": [],
   "source": [
    "## here bank class is abstraction class and dhfc classs is child class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cf91a34f-87ea-480a-9cdf-0d01f6de814b",
   "metadata": {},
   "outputs": [],
   "source": [
    "## abstraction is blue print of class which we made for reference when incapsulation is used to secure i mean to hide some details from user for security purposes by using incapsulation we decide which detail user can se or edit and we give them permissions according to security of data base"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2b7faf04-eef0-4d53-b1c3-62d7c62a8c64",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 2.  we alredy take a look on example of abstraction now we are going to see an example of incapsulation ,let you know that we already used incapsulation in our previous example but we are going to understand it again\n",
    "\n",
    "## example\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "dcb9ad2c-8793-4410-bca2-a036716ed7ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "## incapsulation\n",
    "\n",
    "class details:\n",
    "    \n",
    "    def __init__(self,clas,section,roll_no,mobile_no,email_id):\n",
    "        self.clas=clas\n",
    "        self.section=section\n",
    "        self.roll=roll_no\n",
    "        self.__mobile=mobile_no\n",
    "        self.__email=email_id\n",
    "        \n",
    "        #### here we are going to permit user to see and edit clas ,section and roll_no\n",
    "        ### and not allowing to see email id and to see mobile no but not allowing to edit it\n",
    "        \n",
    "    def change_mail(self,new):\n",
    "        self.__email=new\n",
    "        return \"your new email id is \",self.__email\n",
    "    \n",
    "    def mobile(self):\n",
    "        return self.__mobile\n",
    "    \n",
    "    \n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "775f88bd-127a-4e63-be2a-506abb024f87",
   "metadata": {},
   "outputs": [],
   "source": [
    "prashant=details(12,\"b\",1224,9548065123,\"prashantsinghko2003@gmail.com\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "54b81910-82d2-4b28-af56-666d247cd47b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9548065123"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prashant.mobile()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8a04ebc5-86c5-4656-8168-5641e5620351",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('your new email id is ', 'babuadrsh380@gamil.com')"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prashant.change_mail(\"babuadrsh380@gamil.com\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "adfdee43-46eb-4bd9-9c49-e2478cec5a88",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prashant.clas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "da9aa078-bcb5-4e62-ad13-7f9b7e725fb6",
   "metadata": {},
   "outputs": [],
   "source": [
    "prashant.clas=14"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b1834e7c-2a64-4f82-91aa-08819900ac36",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prashant.clas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "6d982b94-46c0-4d37-af8d-d7293f0a224e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1224"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prashant.roll"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "38356fd1-8232-4de0-b03a-faa7f6fb001a",
   "metadata": {},
   "outputs": [],
   "source": [
    "prashant.roll=750032"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "4ec9928d-46a0-4e6b-8e57-8444d2eaff09",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "750032"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prashant.roll"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "2433be90-d252-4cfc-970e-399795829aac",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 3.>abc module helps in importing functions  from abstraction class to the child class.\n",
    "# we always have to import it before making a blueprint of class ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b0cc4e4c-efb5-49df-9a2a-8dfd42dff350",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 4.> we can crchive data abstraction by using abc module in for making blue print of classes and we have to call before every \n",
    "## new function by using a term == @abc.abstractclassmethod"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "80c43e38-b38f-4667-90d6-180632454b10",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 5.> it may be possible but sorry i cant understand that topic i think so "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "80a26770-3e15-4c05-9148-5e353183ce97",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
